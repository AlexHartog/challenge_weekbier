"""
Django settings for challenge_weekbier project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# from decouple import config
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
assert os.getenv(
    "SECRET_KEY"
), "Django SECRET_KEY not provided, please specify in .env file"
SECRET_KEY = os.getenv("SECRET_KEY")


DEBUG = os.getenv("DEBUG_MODE", False) == "True"

# TODO: Make this more proper?
ALLOWED_HOSTS = [
    "*",
]

CSRF_TRUSTED_ORIGINS = ["http://localhost:1337"]

if os.getenv("CSRF_TRUSTED_ORIGIN"):
    CSRF_TRUSTED_ORIGINS.append(os.getenv("CSRF_TRUSTED_ORIGIN"))


# Application definition

INSTALLED_APPS = [
    # My apps.
    "challenge_weekbier",
    "tailwind",
    "theme",
    # Third party apps.
    "django_browser_reload",
    # "compressor",
    # Default django apps.
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "challenge_weekbier.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(
                BASE_DIR, "challenge_weekbier", "templates", "challenge_weekbier"
            ),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "challenge_weekbier.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
#
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "OPTIONS": {
#             "options": f'-c search_path={"beer_challenge"}',
#         },
#         "NAME": "beer_challenge",
#         "USER": "django",
#         "PASSWORD": "django_pw",
#         "HOST": "192.168.1.102",
#         "PORT": "5432",
#     }
# }

# DB_ENGINE=
# DB_SCHEMA=beer_challenge
# DB_NAME=beer_challenge
# DB_USER=django
# DB_PASSWORD=django_pw
# DB_HOST=192.168.1.102
# DB_PORT=5432
# }
#
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "OPTIONS": {
            "options": f'-c search_path={os.getenv("DB_SCHEMA")}',
        },
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # os.path.join(BASE_DIR, 'theme', 'static'),
]

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# COMPRESS_ROOT = BASE_DIR / "static"

# COMPRESS_ENABLED = True

# STATICFILES_FINDERS = ("compressor.finders.CompressorFinder",)

if os.getenv("NPM_BIN_PATH"):
    NPM_BIN_PATH = os.getenv("NPM_BIN_PATH")
TAILWIND_APP_NAME = "theme"
INTERNAL_IPS = [
    "127.0.0.1",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
